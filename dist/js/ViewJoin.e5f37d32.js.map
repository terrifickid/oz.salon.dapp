{"version":3,"file":"js/ViewJoin.e5f37d32.js","mappings":"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","sources":["webpack://oz.salon.dapp/./src/views/ViewJoin.vue","webpack://oz.salon.dapp/./src/components/FormKyc.vue","webpack://oz.salon.dapp/./src/components/FormKyc.vue?e903","webpack://oz.salon.dapp/./src/components/FormApply.vue","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/_version.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/coders/address.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/coders/array.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/coders/boolean.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/coders/null.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/coders/number.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/coders/string.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/coders/tuple.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/fragments.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/abi-coder.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/abi/lib.esm/interface.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/contracts/lib.esm/_version.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/contracts/lib.esm/index.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/units/lib.esm/_version.js","webpack://oz.salon.dapp/./node_modules/@ethersproject/units/lib.esm/index.js","webpack://oz.salon.dapp/./src/components/FormApply.vue?1bfd","webpack://oz.salon.dapp/./src/components/FormProposal.vue","webpack://oz.salon.dapp/./src/components/FormProposal.vue?f90f","webpack://oz.salon.dapp/./src/views/ViewJoin.vue?e8a4"],"sourcesContent":["<template>\n  <AppShell :colors=\"colors\" :isLoaded=\"loaded\" :protected=\"true\">\n    <template v-if=\"isNew\"><FormKyc /></template>\n    <template v-if=\"!isKycApproved && !isNew\">\n      <AppContent class=\"items-center justify-center\">\n        <h1 class=\"app-text text-center font-light\">\n          Your KYC application<br />is being reviewed.\n        </h1></AppContent\n      >\n    </template>\n    <template v-if=\"isKycApproved && !isApplied\">\n      <AppContent class=\"items-center justify-center\"><FormApply /></AppContent\n    ></template>\n    <template v-if=\"isApplied && !isMember\"\n      ><AppContent class=\"items-center justify-center\"\n        ><FormProposal :id=\"profile.onboard['en-US'].sys.id\" /></AppContent\n    ></template>\n    <template v-if=\"isMember\"\n      ><AppContent class=\"pt-24\">\n        <div class=\"grid grid-cols-12 w-full\">\n          <div class=\"col-span-10 col-start-2\">\n            <p class=\"text-5xl\">\n              Hello,<br />{{ this.profile.firstName[\"en-US\"] }}\n            </p>\n          </div>\n        </div>\n      </AppContent></template\n    >\n  </AppShell>\n</template>\n\n<script>\n// @ is an alias to /src\nimport AppShell from \"@/components/AppShell.vue\";\nimport FormKyc from \"@/components/FormKyc\";\nimport FormApply from \"@/components/FormApply.vue\";\nimport FormProposal from \"@/components/FormProposal.vue\";\nimport AppContent from \"@/components/AppContent.vue\";\nexport default {\n  name: \"DappHome\",\n  components: { AppShell, FormKyc, FormApply, AppContent, FormProposal },\n  data() {\n    return {\n      colors: [\"white\", \"black\"],\n    };\n  },\n  computed: {\n    loaded() {\n      return this.profile;\n    },\n    isNew() {\n      if (\"kycApproved\" in this.profile) return false;\n      return true;\n    },\n    isKycApproved() {\n      if (this.profile.kycApproved) return this.profile.kycApproved[\"en-US\"];\n      return false;\n    },\n    isApplied() {\n      if (\"onboard\" in this.profile) {\n        if (this.profile.onboard[\"en-US\"]) return true;\n      }\n      return false;\n    },\n    isMember() {\n      if (\"salonUnits\" in this.profile) {\n        return this.profile.salonUnits[\"en-US\"];\n      }\n      return false;\n    },\n    profile() {\n      return this.$store.state.profile;\n    },\n  },\n};\n</script>\n","<template>\n  <AppLoader v-show=\"processing\" />\n  <full-page\n    v-show=\"!processing\"\n    v-if=\"ready\"\n    ref=\"fullpage\"\n    :options=\"options\"\n    class=\"pr-16\"\n  >\n    <div class=\"section\">\n      <FormIntro :name=\"name\" :description=\"description\" @ready=\"next\" />\n    </div>\n    <template v-for=\"(field, index) in kycForm\" :key=\"index\">\n      <div class=\"section\">\n        <FormField\n          :field=\"field\"\n          @ready=\"next\"\n          :index=\"index\"\n          v-model=\"form[field.id]\"\n        />\n      </div>\n    </template>\n  </full-page>\n</template>\n<script>\nimport axios from \"axios\";\nimport FormField from \"@/components/Form/FormField.vue\";\nimport FormIntro from \"@/components/Form/FormIntro.vue\";\nimport AppLoader from \"@/components/AppLoader.vue\";\nexport default {\n  components: { FormField, AppLoader, FormIntro },\n  data() {\n    return {\n      name: \"\",\n      description: \"\",\n      ready: false,\n      processing: true,\n      btnTxt: \"Submit\",\n      kycForm: [],\n      form: {\n        walletAddress: \"\",\n      },\n      sending: false,\n      options: {\n        licenseKey: \"K9EP6-N164H-2BKM8-MJLGI-KSURM\",\n        controlArrows: true,\n        scrollBar: false,\n        scrollingSpeed: 500,\n        navigation: true,\n        navigationPosition: \"right\",\n      },\n    };\n  },\n  computed: {\n    walletAddress() {\n      return this.$store.state.walletAddress;\n    },\n  },\n  methods: {\n    async next() {\n      if (await this.validate()) {\n        this.submitForm();\n      } else {\n        console.log(\"next\");\n        //this.$refs.fullpage.api.moveSectionDown();\n      }\n    },\n    async validate() {\n      console.log(\"validate form!\");\n      var i = 0;\n      var error = false;\n      for (let field of this.kycForm) {\n        if (this.form[field.id] == \"\") error = true;\n        if (!([field.id] in this.form)) error = true;\n        if (error) {\n          this.$refs.fullpage.api.moveTo(i + 2);\n          break;\n        }\n        i++;\n      }\n      console.log(\"error is\", error);\n      if (error) return false;\n      return true;\n    },\n    async submitForm() {\n      this.processing = true;\n      console.log(\"Ran Submit!\");\n      try {\n        const res = await axios.post(\n          \"https://salontest-terrifickid.cloud.okteto.net/kyc\",\n          this.form\n        );\n        if (res.data.result) {\n          console.log(\"success\", res.data);\n          this.$store.dispatch(\"connect\");\n        } else {\n          alert(\"Error, Please try again.\");\n          this.processing = false;\n          console.log(\"error\", res.data);\n        }\n      } catch (error) {\n        this.processing = false;\n        console.log(\"error\", error);\n      }\n    },\n  },\n\n  async beforeMount() {\n    try {\n      const res = await axios.get(\n        \"https://salontest-terrifickid.cloud.okteto.net/kyc\"\n      );\n      console.log(\"kycform\", res.data);\n      this.name = res.data.name;\n      this.description = res.data.description;\n      this.kycForm = res.data.fields.filter(function (field) {\n        var disabled = [\n          \"kycApproved\",\n          \"units\",\n          \"walletAddress\",\n          \"onboardProposal\",\n        ];\n        if (disabled.includes(field.id)) return false;\n        return true;\n      });\n\n      this.form.walletAddress = this.walletAddress;\n      this.$emit(\"ready\");\n      this.ready = true;\n      this.processing = false;\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  },\n};\n</script>\n","import { render } from \"./FormKyc.vue?vue&type=template&id=345e51a2\"\nimport script from \"./FormKyc.vue?vue&type=script&lang=js\"\nexport * from \"./FormKyc.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/tk/oz.salon.dapp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"grid grid-cols-12\">\n    <div\n      class=\"col-span-12 sm:col-span-10 sm:col-start-2 lg:col-span-8 lg:col-start-3\"\n    >\n      <form v-on:submit.prevent=\"createProposal\" class=\"w-full\">\n        <label\n          class=\"block text-3xl md:text-4xl mb-4 flex items-center -ml-10 justify-center\"\n          ><span class=\"text-sm mr-1\">1</span>\n          <svg height=\"10\" width=\"11\" class=\"mr-4\">\n            <path\n              d=\"M7.586 5L4.293 1.707 5.707.293 10.414 5 5.707 9.707 4.293 8.293z\"\n            ></path>\n            <path d=\"M8 4v2H0V4z\"></path></svg\n          >Become a Member *</label\n        >\n        <span class=\"block text-lg lg:text-xl font-light opacity-75 mb-4\"\n          >The amount sent will be held in escrow pending a member vote. If the\n          proposal passes, the funds will be sent to the DAO. If the proposal\n          fails, the funds will be refunded to you.</span\n        >\n        <div class=\"grid grid-cols-12 gap-6\">\n          <div class=\"col-span-12 sm:col-span-6\">\n            <input\n              type=\"number\"\n              class=\"text-3xl bg-transparent block border-b border-black w-full text-black py-3 outline-none placeholder-black font-light\"\n              placeholder=\"$0.00\"\n              v-model=\"usdcAmount\"\n              required\n            />\n            <span\n              class=\"block text-xs md:text-base mt-3 lg:text-md font-light opacity-75 mb-4\"\n              >This is the amount of USDC tokens you are putting into escrow\n              pending a governance vote for membership.</span\n            >\n          </div>\n          <div class=\"col-span-12 sm:col-span-6\">\n            <input\n              type=\"number\"\n              class=\"text-3xl bg-transparent block border-b border-black w-full text-black py-3 outline-none placeholder-black font-light\"\n              placeholder=\"S0\"\n              required\n              v-model=\"sAmount\"\n            />\n            <span\n              class=\"block mt-3 text-xs md:text-base lg:text-md font-light opacity-75 mb-4\"\n              >This is the amount of DAO membership units you are requesting to\n              be authorized in exchange.</span\n            >\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          :disabled=\"processing\"\n          class=\"mx-auto mt-6 bg-black text-canary rounded px-4 py-3 text-xl shadow-sm op flex items-center w-64 justify-center\"\n        >\n          {{ btnTxt }}\n        </button>\n      </form>\n    </div>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nexport default {\n  data() {\n    return {\n      btnTxt: \"Submit\",\n      processing: false,\n      usdcAmount: \"\",\n      sAmount: \"\",\n    };\n  },\n  methods: {\n    async initiate() {\n      this.processing = true;\n      var usdc = {\n        address: \"0x07865c6e87b9f70255377e024ace6630c1eaa37f\",\n        abi: [\n          {\n            inputs: [\n              { internalType: \"address\", name: \"to\", type: \"address\" },\n              { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n            ],\n            name: \"transfer\",\n            outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n            stateMutability: \"nonpayable\",\n            type: \"function\",\n          },\n        ],\n      };\n      let ethereum = window.ethereum;\n      let provider = new ethers.providers.Web3Provider(ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const usdcContract = new ethers.Contract(usdc.address, usdc.abi, signer);\n      var amt = ethers.utils\n        .parseUnits(Number(this.usdcAmount).toFixed(1), 6)\n        .toNumber();\n      try {\n        this.btnTxt = \"Processing...\";\n        let transfer = await usdcContract.transfer(this.walletAddress, 1);\n        console.log(transfer.hash, amt);\n        await this.createProposal();\n      } catch (err) {\n        this.btnTxt = \"Submit\";\n        this.processing = false;\n        console.log(err);\n      }\n    },\n    async createProposal() {\n      this.btnTxt = \"Processing...\";\n      this.processing = true;\n      console.log(\"Creating Proposal...\");\n      try {\n        const res = await axios.post(\n          \"https://salontest-terrifickid.cloud.okteto.net/onboard\",\n          {\n            profile: this.$store.state.profile,\n            usdc: this.usdcAmount,\n            s: this.sAmount,\n          }\n        );\n        if (res.data.result) {\n          this.$store.dispatch(\"connect\");\n        } else {\n          console.log(res.data);\n          this.btnTxt = \"ERROR A1: Contact Support\";\n        }\n      } catch (error) {\n        console.log(error);\n        this.btnTxt = \"ERROR A2: Contact Support\";\n      }\n    },\n  },\n  computed: {\n    walletAddress() {\n      return this.$store.state.walletAddress;\n    },\n  },\n};\n</script>\n","export const version = \"abi/5.6.3\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nexport function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nexport class Coder {\n    constructor(name, type, localName, dynamic) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n    _throwError(message, value) {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n}\nexport class Writer {\n    constructor(wordSize) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n    get data() {\n        return hexConcat(this._data);\n    }\n    get length() { return this._dataLength; }\n    _writeData(data) {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n    appendWriter(writer) {\n        return this._writeData(concat(writer._data));\n    }\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value) {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n        }\n        return this._writeData(bytes);\n    }\n    _getValue(value) {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n        }\n        return bytes;\n    }\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value) {\n        return this._writeData(this._getValue(value));\n    }\n    writeUpdatableValue() {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\nexport class Reader {\n    constructor(data, wordSize, coerceFunc, allowLoose) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n        this._offset = 0;\n    }\n    get data() { return hexlify(this._data); }\n    get consumed() { return this._offset; }\n    // The default Coerce function\n    static coerce(name, value) {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) {\n            value = value.toNumber();\n        }\n        return value;\n    }\n    coerce(name, value) {\n        if (this._coerceFunc) {\n            return this._coerceFunc(name, value);\n        }\n        return Reader.coerce(name, value);\n    }\n    _peekBytes(offset, length, loose) {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            }\n            else {\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n    subReader(offset) {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n    readBytes(length, loose) {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    readValue() {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n//# sourceMappingURL=abstract-coder.js.map","\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class AddressCoder extends Coder {\n    constructor(localName) {\n        super(\"address\", \"address\", localName, false);\n    }\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n    encode(writer, value) {\n        try {\n            value = getAddress(value);\n        }\n        catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n}\n//# sourceMappingURL=address.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\n// Clones the functionality of an existing Coder, but without a localName\nexport class AnonymousCoder extends Coder {\n    constructor(coder) {\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n    defaultValue() {\n        return this.coder.defaultValue();\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n}\n//# sourceMappingURL=anonymous.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n    let arrayValues = null;\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nexport function unpack(reader, coders) {\n    let values = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) {\n                accum[name] = 0;\n            }\n            accum[name]++;\n        }\n        return accum;\n    }, {});\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder, index) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        const value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n    return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        this.coder = coder;\n        this.length = length;\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n//# sourceMappingURL=array.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nexport class BooleanCoder extends Coder {\n    constructor(localName) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n    defaultValue() {\n        return false;\n    }\n    encode(writer, value) {\n        return writer.writeValue(value ? 1 : 0);\n    }\n    decode(reader) {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n    }\n}\n//# sourceMappingURL=boolean.js.map","\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class DynamicBytesCoder extends Coder {\n    constructor(type, localName) {\n        super(type, type, localName, true);\n    }\n    defaultValue() {\n        return \"0x\";\n    }\n    encode(writer, value) {\n        value = arrayify(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    }\n}\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"bytes\", localName);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(super.decode(reader)));\n    }\n}\n//# sourceMappingURL=bytes.js.map","\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n    constructor(size, localName) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n    defaultValue() {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n    encode(writer, value) {\n        let data = arrayify(value);\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n    }\n}\n//# sourceMappingURL=fixed-bytes.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nexport class NullCoder extends Coder {\n    constructor(localName) {\n        super(\"null\", \"\", localName, false);\n    }\n    defaultValue() {\n        return null;\n    }\n    encode(writer, value) {\n        if (value != null) {\n            this._throwError(\"not null\", value);\n        }\n        return writer.writeBytes([]);\n    }\n    decode(reader) {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n    }\n}\n//# sourceMappingURL=null.js.map","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\nimport { Coder } from \"./abstract-coder\";\nexport class NumberCoder extends Coder {\n    constructor(size, signed, localName) {\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\n        super(name, name, localName, false);\n        this.size = size;\n        this.signed = signed;\n    }\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, value) {\n        let v = BigNumber.from(value);\n        // Check bounds are safe for encoding\n        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        }\n        else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n        return writer.writeValue(v);\n    }\n    decode(reader) {\n        let value = reader.readValue().mask(this.size * 8);\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n        return reader.coerce(this.name, value);\n    }\n}\n//# sourceMappingURL=number.js.map","\"use strict\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { DynamicBytesCoder } from \"./bytes\";\nexport class StringCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"string\", localName);\n    }\n    defaultValue() {\n        return \"\";\n    }\n    encode(writer, value) {\n        return super.encode(writer, toUtf8Bytes(value));\n    }\n    decode(reader) {\n        return toUtf8String(super.decode(reader));\n    }\n}\n//# sourceMappingURL=string.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, value) {\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n//# sourceMappingURL=tuple.js.map","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nconst _constructorGuard = {};\nlet ModifiersBytes = { calldata: true, memory: true, storage: true };\nlet ModifiersNest = { calldata: true, memory: true };\nfunction checkModifier(type, name) {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) {\n            return true;\n        }\n    }\n    else if (type === \"address\") {\n        if (name === \"payable\") {\n            return true;\n        }\n    }\n    else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) {\n            return true;\n        }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param, allowIndexed) {\n    let originalParam = param;\n    function throwError(i) {\n        logger.throwArgumentError(`unexpected character at position ${i}`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n    function newNode(parent) {\n        let node = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) {\n            node.indexed = false;\n        }\n        return node;\n    }\n    let parent = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                }\n                else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [newNode(node)];\n                node = node.components[0];\n                break;\n            case \")\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let child = node;\n                node = node.parent;\n                if (!node) {\n                    throwError(i);\n                }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n            case \",\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let sibling = newNode(node.parent);\n                //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n            // Hit a space...\n            case \" \":\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) {\n                                throwError(i);\n                            }\n                            if (node.indexed) {\n                                throwError(i);\n                            }\n                            node.indexed = true;\n                            node.name = \"\";\n                        }\n                        else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        }\n                        else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n                break;\n            case \"[\":\n                if (!node.state.allowArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n            case \"]\":\n                if (!node.state.readArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                }\n                else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                }\n                else if (node.state.readArray) {\n                    node.type += c;\n                }\n                else {\n                    throwError(i);\n                }\n        }\n    }\n    if (node.parent) {\n        logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n    }\n    delete parent.state;\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) {\n            throwError(originalParam.length - 7);\n        }\n        if (node.indexed) {\n            throwError(originalParam.length - 7);\n        }\n        node.indexed = true;\n        node.name = \"\";\n    }\n    else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n    parent.type = verifyType(parent.type);\n    return parent;\n}\nfunction populate(object, params) {\n    for (let key in params) {\n        defineReadOnly(object, key, params[key]);\n    }\n}\nexport const FormatTypes = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n    // JSON-format a la Solidity\n    json: \"json\"\n});\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nexport class ParamType {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new ParamType()\"\n            });\n        }\n        populate(this, params);\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        }\n        else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\" : this.type)\n            });\n        }\n        this._isParamType = true;\n        Object.freeze(this);\n    }\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            let result = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n        }\n        else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    static from(value, allowIndexed) {\n        if (typeof (value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ParamType.isParamType(value)) {\n            return value;\n        }\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null : !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject) : null)\n        });\n    }\n    static fromString(value, allowIndexed) {\n        function ParamTypify(node) {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n    static isParamType(value) {\n        return !!(value != null && value._isParamType);\n    }\n}\n;\nfunction parseParams(value, allowIndex) {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\nexport class Fragment {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n        this._isFragment = true;\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n        return Fragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n    static fromString(value) {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n        if (value.split(\" \")[0] === \"event\") {\n            return EventFragment.fromString(value.substring(5).trim());\n        }\n        else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        }\n        else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        }\n        else if (value.split(\" \")[0] === \"error\") {\n            return ErrorFragment.fromString(value.substring(5).trim());\n        }\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n    static isFragment(value) {\n        return !!(value && value._isFragment);\n    }\n}\nexport class EventFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (EventFragment.isEventFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n        const params = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n        return new EventFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch (modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n    static isEventFragment(value) {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\nfunction parseGas(value, params) {\n    params.gas = null;\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n    return value;\n}\nfunction parseModifiers(value, params) {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\nfunction verifyState(value) {\n    let result = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n    }\n    else if (value.payable != null) {\n        result.payable = !!value.payable;\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n        result.constant = !!value.constant;\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        }\n        else {\n            result.stateMutability = (result.payable ? \"payable\" : \"nonpayable\");\n        }\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n    }\n    else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\" : \"payable\");\n    }\n    else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    return result;\n}\nexport class ConstructorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n        let result = \"constructor(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ConstructorFragment.isConstructorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n        const params = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"constructor\" };\n        value = parseGas(value, params);\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n        params.inputs = parseParams(parens[2].trim(), false);\n        parseModifiers(parens[3].trim(), params);\n        return ConstructorFragment.fromObject(params);\n    }\n    static isConstructorFragment(value) {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\nexport class FunctionFragment extends ConstructorFragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            }\n            else if (this.constant) {\n                result += \"view \";\n            }\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map((output) => output.format(format)).join(\", \") + \") \";\n            }\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (FunctionFragment.isFunctionFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new FunctionFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"function\" };\n        value = parseGas(value, params);\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        parseModifiers(parens[3].trim(), params);\n        // We have outputs\n        if (comps.length > 1) {\n            let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        }\n        else {\n            params.outputs = [];\n        }\n        return FunctionFragment.fromObject(params);\n    }\n    static isFunctionFragment(value) {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n//export class StructFragment extends Fragment {\n//}\nfunction checkForbidden(fragment) {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(`cannot specify user defined ${sig} error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\nexport class ErrorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ErrorFragment.isErrorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])\n        };\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n    static fromString(value) {\n        let params = { type: \"error\" };\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n    static isErrorFragment(value) {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\nfunction verifyType(type) {\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    }\n    else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n    // @TODO: more verification\n    return type;\n}\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value) {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${value}\"`, \"value\", value);\n    }\n    return value;\n}\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nfunction splitNesting(value) {\n    value = value.trim();\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        }\n        else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            }\n            else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) {\n        result.push(accum);\n    }\n    return result;\n}\n//# sourceMappingURL=fragments.js.map","\"use strict\";\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport class AbiCoder {\n    constructor(coerceFunc) {\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n    _getCoder(param) {\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n    _getWordSize() { return 32; }\n    _getReader(data, allowLoose) {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n    _getWriter() {\n        return new Writer(this._getWordSize());\n    }\n    getDefaultValue(types) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    encode(types, values) {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    decode(types, data, loose) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\nexport const defaultAbiCoder = new AbiCoder();\n//# sourceMappingURL=abi-coder.js.map","\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class ErrorDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nconst BuiltinErrors = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [\"string\"], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [\"uint256\"] }\n};\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    constructor(fragments) {\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(fragment) {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n            return this.errors[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment) {\n        if (typeof (fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            }\n            catch (error) {\n                try {\n                    fragment = this.getError(fragment);\n                }\n                catch (_) {\n                    throw error;\n                }\n            }\n        }\n        return getStatic(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    decodeErrorResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n    encodeErrorResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [])\n        ]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let message = \"\";\n        let errorArgs = null;\n        let errorName = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) {\n                        reason = errorArgs[0];\n                    }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n                    }\n                    else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n                    }\n                }\n                else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    }\n                    catch (error) { }\n                }\n                break;\n            }\n        }\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    parseError(data) {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n//# sourceMappingURL=interface.js.map","export const version = \"contracts/5.6.2\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n///////////////////////////////\nconst allowedTransactionKeys = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const name = yield nameOrPromise;\n        if (typeof (name) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n        }\n        // If it is already an address, just use it (after adding checksum)\n        try {\n            return getAddress(name);\n        }\n        catch (error) { }\n        if (!resolver) {\n            logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"resolveName\"\n            });\n        }\n        const address = yield resolver.resolveName(name);\n        if (address == null) {\n            logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n        }\n        return address;\n    });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (Array.isArray(paramType)) {\n            return yield Promise.all(paramType.map((paramType, index) => {\n                return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);\n            }));\n        }\n        if (paramType.type === \"address\") {\n            return yield resolveName(resolver, value);\n        }\n        if (paramType.type === \"tuple\") {\n            return yield resolveAddresses(resolver, value, paramType.components);\n        }\n        if (paramType.baseType === \"array\") {\n            if (!Array.isArray(value)) {\n                return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"value\",\n                    value\n                }));\n            }\n            return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n        }\n        return value;\n    });\n}\nfunction populateTransaction(contract, fragment, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // If an extra argument is given, it is overrides\n        let overrides = {};\n        if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            overrides = shallowCopy(args.pop());\n        }\n        // Make sure the parameter count matches\n        logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n        // Populate \"from\" override (allow promises)\n        if (contract.signer) {\n            if (overrides.from) {\n                // Contracts with a Signer are from the Signer's frame-of-reference;\n                // but we allow overriding \"from\" if it matches the signer\n                overrides.from = resolveProperties({\n                    override: resolveName(contract.signer, overrides.from),\n                    signer: contract.signer.getAddress()\n                }).then((check) => __awaiter(this, void 0, void 0, function* () {\n                    if (getAddress(check.signer) !== check.override) {\n                        logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"overrides.from\"\n                        });\n                    }\n                    return check.override;\n                }));\n            }\n            else {\n                overrides.from = contract.signer.getAddress();\n            }\n        }\n        else if (overrides.from) {\n            overrides.from = resolveName(contract.provider, overrides.from);\n            //} else {\n            // Contracts without a signer can override \"from\", and if\n            // unspecified the zero address is used\n            //overrides.from = AddressZero;\n        }\n        // Wait for all dependencies to be resolved (prefer the signer over the provider)\n        const resolved = yield resolveProperties({\n            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n            address: contract.resolvedAddress,\n            overrides: (resolveProperties(overrides) || {})\n        });\n        // The ABI coded transaction\n        const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n        const tx = {\n            data: data,\n            to: resolved.address\n        };\n        // Resolved Overrides\n        const ro = resolved.overrides;\n        // Populate simple overrides\n        if (ro.nonce != null) {\n            tx.nonce = BigNumber.from(ro.nonce).toNumber();\n        }\n        if (ro.gasLimit != null) {\n            tx.gasLimit = BigNumber.from(ro.gasLimit);\n        }\n        if (ro.gasPrice != null) {\n            tx.gasPrice = BigNumber.from(ro.gasPrice);\n        }\n        if (ro.maxFeePerGas != null) {\n            tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n        }\n        if (ro.maxPriorityFeePerGas != null) {\n            tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n        }\n        if (ro.from != null) {\n            tx.from = ro.from;\n        }\n        if (ro.type != null) {\n            tx.type = ro.type;\n        }\n        if (ro.accessList != null) {\n            tx.accessList = accessListify(ro.accessList);\n        }\n        // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n        if (tx.gasLimit == null && fragment.gas != null) {\n            // Compute the intrinsic gas cost for this transaction\n            // @TODO: This is based on the yellow paper as of Petersburg; this is something\n            // we may wish to parameterize in v6 as part of the Network object. Since this\n            // is always a non-nil to address, we can ignore G_create, but may wish to add\n            // similar logic to the ContractFactory.\n            let intrinsic = 21000;\n            const bytes = arrayify(data);\n            for (let i = 0; i < bytes.length; i++) {\n                intrinsic += 4;\n                if (bytes[i]) {\n                    intrinsic += 64;\n                }\n            }\n            tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n        }\n        // Populate \"value\" override\n        if (ro.value) {\n            const roValue = BigNumber.from(ro.value);\n            if (!roValue.isZero() && !fragment.payable) {\n                logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: overrides.value\n                });\n            }\n            tx.value = roValue;\n        }\n        if (ro.customData) {\n            tx.customData = shallowCopy(ro.customData);\n        }\n        if (ro.ccipReadEnabled) {\n            tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n        }\n        // Remove the overrides\n        delete overrides.nonce;\n        delete overrides.gasLimit;\n        delete overrides.gasPrice;\n        delete overrides.from;\n        delete overrides.value;\n        delete overrides.type;\n        delete overrides.accessList;\n        delete overrides.maxFeePerGas;\n        delete overrides.maxPriorityFeePerGas;\n        delete overrides.customData;\n        delete overrides.ccipReadEnabled;\n        // Make sure there are no stray overrides, which may indicate a\n        // typo or using an unsupported key.\n        const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));\n        if (leftovers.length) {\n            logger.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides\",\n                overrides: leftovers\n            });\n        }\n        return tx;\n    });\n}\nfunction buildPopulate(contract, fragment) {\n    return function (...args) {\n        return populateTransaction(contract, fragment, args);\n    };\n}\nfunction buildEstimate(contract, fragment) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!signerOrProvider) {\n                logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"estimateGas\"\n                });\n            }\n            const tx = yield populateTransaction(contract, fragment, args);\n            return yield signerOrProvider.estimateGas(tx);\n        });\n    };\n}\nfunction addContractWait(contract, tx) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations) => {\n        return wait(confirmations).then((receipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event = deepCopy(log);\n                let parsed = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                }\n                catch (e) { }\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data, topics) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n                // Useful operations\n                event.removeListener = () => { return contract.provider; };\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                };\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                };\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                };\n                return event;\n            });\n            return receipt;\n        });\n    };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Extract the \"blockTag\" override if present\n            let blockTag = undefined;\n            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n                const overrides = shallowCopy(args.pop());\n                if (overrides.blockTag != null) {\n                    blockTag = yield overrides.blockTag;\n                }\n                delete overrides.blockTag;\n                args.push(overrides);\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed(blockTag);\n            }\n            // Call a node and get the result\n            const tx = yield populateTransaction(contract, fragment, args);\n            const result = yield signerOrProvider.call(tx, blockTag);\n            try {\n                let value = contract.interface.decodeFunctionResult(fragment, result);\n                if (collapseSimple && fragment.outputs.length === 1) {\n                    value = value[0];\n                }\n                return value;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    error.address = contract.address;\n                    error.args = args;\n                    error.transaction = tx;\n                }\n                throw error;\n            }\n        });\n    };\n}\nfunction buildSend(contract, fragment) {\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!contract.signer) {\n                logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"sendTransaction\"\n                });\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed();\n            }\n            const txRequest = yield populateTransaction(contract, fragment, args);\n            const tx = yield contract.signer.sendTransaction(txRequest);\n            // Tweak the tx.wait so the receipt has extra properties\n            addContractWait(contract, tx);\n            return tx;\n        });\n    };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\") : \"\");\n}\nclass RunningEvent {\n    constructor(tag, filter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [];\n    }\n    addListener(listener, once) {\n        this._listeners.push({ listener: listener, once: once });\n    }\n    removeListener(listener) {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) {\n                return true;\n            }\n            done = true;\n            return false;\n        });\n    }\n    removeAllListeners() {\n        this._listeners = [];\n    }\n    listeners() {\n        return this._listeners.map((i) => i.listener);\n    }\n    listenerCount() {\n        return this._listeners.length;\n    }\n    run(args) {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n            const argsCopy = args.slice();\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n        return listenerCount;\n    }\n    prepareEvent(event) {\n    }\n    // Returns the array that will be applied to an emit\n    getEmit(event) {\n        return [event];\n    }\n}\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    constructor(address, contractInterface, fragment, topics) {\n        const filter = {\n            address: address\n        };\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) {\n                logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n            }\n            filter.topics = topics.slice();\n        }\n        else {\n            filter.topics = [topic];\n        }\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n        event.decode = (data, topics) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        }\n        catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n    getEmit(event) {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) {\n            throw errors[0].error;\n        }\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    constructor(address, contractInterface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n            event.decode = (data, topics) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n            event.args = parsed.args;\n        }\n        catch (error) {\n            // No matching event\n        }\n    }\n}\nexport class BaseContract {\n    constructor(addressOrName, contractInterface, signerOrProvider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        }\n        else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n        defineReadOnly(this, \"callStatic\", {});\n        defineReadOnly(this, \"estimateGas\", {});\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"populateTransaction\", {});\n        defineReadOnly(this, \"filters\", {});\n        {\n            const uniqueFilters = {};\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                    };\n                });\n                if (!uniqueFilters[event.name]) {\n                    uniqueFilters[event.name] = [];\n                }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                }\n                else {\n                    logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n                }\n            });\n        }\n        defineReadOnly(this, \"_runningEvents\", {});\n        defineReadOnly(this, \"_wrappedEmits\", {});\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        }\n        else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            }\n            catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n        const uniqueNames = {};\n        const uniqueSignatures = {};\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${name}`]) {\n                    uniqueNames[`%${name}`] = [];\n                }\n                uniqueNames[`%${name}`].push(signature);\n            }\n            if (this[signature] == null) {\n                defineReadOnly(this, signature, buildDefault(this, fragment, true));\n            }\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) {\n                return;\n            }\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n            const signature = signatures[0];\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if (this[name] == null) {\n                    defineReadOnly(this, name, this[signature]);\n                }\n            }\n            catch (e) { }\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n    static getContractAddress(transaction) {\n        return getContractAddress(transaction);\n    }\n    static getInterface(contractInterface) {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n    // @TODO: Allow timeout?\n    deployed() {\n        return this._deployed();\n    }\n    _deployed(blockTag) {\n        if (!this._deployedPromise) {\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n            }\n            else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n        return this._deployedPromise;\n    }\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n    fallback(overrides) {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" });\n        }\n        const tx = shallowCopy(overrides || {});\n        [\"from\", \"to\"].forEach(function (key) {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider) {\n        if (typeof (signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n        const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    }\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName) {\n        return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);\n    }\n    static isIndexed(value) {\n        return Indexed.isIndexed(value);\n    }\n    _normalizeRunningEvent(runningEvent) {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n        }\n        return runningEvent;\n    }\n    _getRunningEvent(eventName) {\n        if (typeof (eventName) === \"string\") {\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName);\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof (topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            }\n            catch (error) { }\n            // Filter by the unknown topichash\n            const filter = {\n                address: this.address,\n                topics: eventName.topics\n            };\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n    _checkRunningEvents(runningEvent) {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent, log, listener) {\n        const event = deepCopy(log);\n        event.removeListener = () => {\n            if (!listener) {\n                return;\n            }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); };\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n        return event;\n    }\n    _addEventListener(runningEvent, listener, once) {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" });\n        }\n        runningEvent.addListener(listener, once);\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    }\n                    catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n    queryFilter(event, fromBlockOrBlockhash, toBlock) {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n        if (typeof (fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            filter.blockHash = fromBlockOrBlockhash;\n        }\n        else {\n            filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);\n            filter.toBlock = ((toBlock != null) ? toBlock : \"latest\");\n        }\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n    on(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n    once(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n    emit(eventName, ...args) {\n        if (!this.provider) {\n            return false;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!this.provider) {\n            return 0;\n        }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n    listeners(eventName) {\n        if (!this.provider) {\n            return [];\n        }\n        if (eventName == null) {\n            const result = [];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener);\n                });\n            }\n            return result;\n        }\n        return this._getRunningEvent(eventName).listeners();\n    }\n    removeAllListeners(eventName) {\n        if (!this.provider) {\n            return this;\n        }\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    off(eventName, listener) {\n        if (!this.provider) {\n            return this;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n}\nexport class Contract extends BaseContract {\n}\nexport class ContractFactory {\n    constructor(contractInterface, bytecode, signer) {\n        let bytecodeHex = null;\n        if (typeof (bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        }\n        else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        }\n        else if (bytecode && typeof (bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = bytecode.object;\n        }\n        else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") {\n            bytecodeHex = \"0x\" + bytecodeHex;\n        }\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args) {\n        let tx = {};\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n        return tx;\n    }\n    deploy(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let overrides = {};\n            // If 1 extra parameter was passed in, it contains overrides\n            if (args.length === this.interface.deploy.inputs.length + 1) {\n                overrides = args.pop();\n            }\n            // Make sure the call matches the constructor signature\n            logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n            // Resolve ENS names and promises in the arguments\n            const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n            params.push(overrides);\n            // Get the deployment transaction (with optional overrides)\n            const unsignedTx = this.getDeployTransaction(...params);\n            // Send the deployment transaction\n            const tx = yield this.signer.sendTransaction(unsignedTx);\n            const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n            const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n            // Add the modified wait that wraps events\n            addContractWait(contract, tx);\n            defineReadOnly(contract, \"deployTransaction\", tx);\n            return contract;\n        });\n    }\n    attach(address) {\n        return (this.constructor).getContract(address, this.interface, this.signer);\n    }\n    connect(signer) {\n        return new (this.constructor)(this.interface, this.bytecode, signer);\n    }\n    static fromSolidity(compilerOutput, signer) {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n        if (typeof (compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n        const abi = compilerOutput.abi;\n        let bytecode = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        }\n        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n        return new this(abi, bytecode, signer);\n    }\n    static getInterface(contractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n    static getContractAddress(tx) {\n        return getContractAddress(tx);\n    }\n    static getContract(address, contractInterface, signer) {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport { arrayify, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BigNumber, isBigNumberish } from \"./bignumber\";\nconst _constructorGuard = {};\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\nfunction throwFault(message, fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value !== undefined) {\n        params.value = value;\n    }\n    return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) {\n    zeros += zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals) {\n    if (typeof (decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        }\n        catch (e) { }\n    }\n    if (typeof (decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\nexport function formatFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n    const negative = value.lt(Zero);\n    if (negative) {\n        value = value.mul(NegativeOne);\n    }\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) {\n        fraction = \"0\" + fraction;\n    }\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    const whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n        value = whole;\n    }\n    else {\n        value = whole + \".\" + fraction;\n    }\n    if (negative) {\n        value = \"-\" + value;\n    }\n    return value;\n}\nexport function parseFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    if (typeof (value) !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) {\n        value = value.substring(1);\n    }\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) {\n        whole = \"0\";\n    }\n    if (!fraction) {\n        fraction = \"0\";\n    }\n    // Trim trailing zeros\n    while (fraction[fraction.length - 1] === \"0\") {\n        fraction = fraction.substring(0, fraction.length - 1);\n    }\n    // Check the fraction doesn't exceed our decimals size\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n    // If decimals is 0, we have an empty string for fraction\n    if (fraction === \"\") {\n        fraction = \"0\";\n    }\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) {\n        fraction += \"0\";\n    }\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n    if (negative) {\n        wei = wei.mul(NegativeOne);\n    }\n    return wei;\n}\nexport class FixedFormat {\n    constructor(constructorGuard, signed, width, decimals) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n        this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n        this._multiplier = getMultiplier(decimals);\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (value instanceof FixedFormat) {\n            return value;\n        }\n        if (typeof (value) === \"number\") {\n            value = `fixed128x${value}`;\n        }\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n        if (typeof (value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            }\n            else if (value === \"ufixed\") {\n                signed = false;\n            }\n            else {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) {\n                    logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n                }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        }\n        else if (value) {\n            const check = (key, type, defaultValue) => {\n                if (value[key] == null) {\n                    return defaultValue;\n                }\n                if (typeof (value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            };\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n}\nexport class FixedNumber {\n    constructor(constructorGuard, hex, value, format) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n        this._isFixedNumber = true;\n        Object.freeze(this);\n    }\n    _checkFormat(other) {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n    addUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n    subUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n    mulUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n    divUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n    floor() {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    }\n    ceiling() {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    }\n    // @TODO: Support other rounding algorithms\n    round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        // If we are already in range, we're done\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n        if (comps[1].length <= decimals) {\n            return this;\n        }\n        const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n        const bump = BUMP.toFormat(this.format);\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n    isZero() {\n        return (this._value === \"0.0\" || this._value === \"0\");\n    }\n    isNegative() {\n        return (this._value[0] === \"-\");\n    }\n    toString() { return this._value; }\n    toHexString(width) {\n        if (width == null) {\n            return this._hex;\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n        }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n    toUnsafeFloat() { return parseFloat(this.toString()); }\n    toFormat(format) {\n        return FixedNumber.fromString(this._value, format);\n    }\n    static fromValue(value, decimals, format) {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n        if (decimals == null) {\n            decimals = 0;\n        }\n        if (format == null) {\n            format = \"fixed\";\n        }\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n    static fromString(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        const numeric = parseFixed(value, fixedFormat.decimals);\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n        let hex = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        }\n        else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static fromBytes(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) {\n            numeric = numeric.fromTwos(fixedFormat.width);\n        }\n        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static from(value, format) {\n        if (typeof (value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        }\n        catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n    static isFixedNumber(value) {\n        return !!(value && value._isFixedNumber);\n    }\n}\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");\n//# sourceMappingURL=fixednumber.js.map","export const version = \"units/5.6.1\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nexport function commify(value) {\n    const comps = String(value).split(\".\");\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") {\n        whole = whole.substring(1);\n    }\n    if (whole === \"\") {\n        whole = \"0\";\n    }\n    let suffix = \"\";\n    if (comps.length === 2) {\n        suffix = \".\" + (comps[1] || \"0\");\n    }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n    const formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        }\n        else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n    return negative + formatted.join(\",\") + suffix;\n}\nexport function formatUnits(value, unitName) {\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return formatFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function parseUnits(value, unitName) {\n    if (typeof (value) !== \"string\") {\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return parseFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function formatEther(wei) {\n    return formatUnits(wei, 18);\n}\nexport function parseEther(ether) {\n    return parseUnits(ether, 18);\n}\n//# sourceMappingURL=index.js.map","import { render } from \"./FormApply.vue?vue&type=template&id=611a064c\"\nimport script from \"./FormApply.vue?vue&type=script&lang=js\"\nexport * from \"./FormApply.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/tk/oz.salon.dapp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"grid grid-cols-12\" v-if=\"'fields' in proposal\">\n    <div class=\"col-span-12\">\n      <form class=\"flex items-center\">\n        <div class=\"w-screen\">\n          <label\n            class=\"flex block text-3xl md:text-4xl mb-4 items-center justify-left\"\n            ><span class=\"text-sm mr-1\">1</span>\n            <svg height=\"10\" width=\"11\" class=\"mr-4\">\n              <path\n                class=\"fill-electric\"\n                d=\"M7.586 5L4.293 1.707 5.707.293 10.414 5 5.707 9.707 4.293 8.293z\"\n              ></path>\n              <path d=\"M8 4v2H0V4z\"></path></svg\n            >{{ proposal.fields.proposalType[\"en-US\"][0] }}<br />#{{\n              id\n            }}*</label\n          >\n          <ul class=\"flex\">\n            <li class=\"mr-4\">\n              <span class=\"text-xs\">vote start: </span\n              >{{ proposal.fields.startDate[\"en-US\"] }}\n            </li>\n            <li>\n              <span class=\"text-xs\">vote end: </span\n              >{{ proposal.fields.endDate[\"en-US\"] }}\n            </li>\n          </ul>\n          <div class=\"grid grid-cols-12\">\n            <div class=\"col-span-6\">\n              <p class=\"text-2xl my-4\">\n                {{ proposal.fields.meta[\"en-US\"].usdc }} for\n                {{ proposal.fields.meta[\"en-US\"].s }} Salon units\n              </p>\n\n              <p class=\"text-2xl my-4\">\n                {{ proposal.fields.meta[\"en-US\"].profile.firstName[\"en-US\"]\n                }}<br />\n                {{ proposal.fields.meta[\"en-US\"].profile.lastName[\"en-US\"]\n                }}<br />\n              </p>\n              <p class=\"text-sm mt-12\">\n                {{ proposal.fields.meta[\"en-US\"].profile.walletAddress[\"en-US\"]\n                }}<br />\n                {{\n                  proposal.fields.meta[\"en-US\"].profile.emailAddress[\"en-US\"]\n                }}\n              </p>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nexport default {\n  components: {},\n  props: [\"id\"],\n  data() {\n    return {\n      proposal: {},\n    };\n  },\n  async beforeMount() {\n    console.log(\"loading proposal!\");\n    try {\n      const res = await axios.get(\n        \"https://salontest-terrifickid.cloud.okteto.net/entry/\" + this.id\n      );\n      this.proposal = res.data;\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  },\n};\n</script>\n","import { render } from \"./FormProposal.vue?vue&type=template&id=1a86c8dc\"\nimport script from \"./FormProposal.vue?vue&type=script&lang=js\"\nexport * from \"./FormProposal.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/tk/oz.salon.dapp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./ViewJoin.vue?vue&type=template&id=02e4add7\"\nimport script from \"./ViewJoin.vue?vue&type=script&lang=js\"\nexport * from \"./ViewJoin.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/tk/oz.salon.dapp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","colors","isLoaded","loaded","protected","isKycApproved","isNew","isApplied","isMember","id","profile","onboard","sys","firstName","processing","ref","options","name","description","next","kycForm","field","index","form","components","FormField","AppLoader","FormIntro","data","ready","btnTxt","walletAddress","sending","licenseKey","controlArrows","scrollBar","scrollingSpeed","navigation","navigationPosition","computed","this","$store","state","methods","async","validate","submitForm","console","log","i","error","$refs","fullpage","api","moveTo","res","result","dispatch","alert","fields","filter","disabled","includes","$emit","__exports__","createProposal","type","placeholder","required","usdcAmount","sAmount","version","logger","checkResultErrors","errors","checkErrors","path","object","Array","isArray","key","childPath","slice","push","Coder","constructor","localName","dynamic","_throwError","message","value","throwArgumentError","Writer","wordSize","_data","_dataLength","_padding","Uint8Array","length","_writeData","appendWriter","writer","writeBytes","bytes","paddingOffset","_getValue","throwError","offset","writeValue","writeUpdatableValue","Reader","coerceFunc","allowLoose","_offset","consumed","static","match","parseInt","toNumber","coerce","_coerceFunc","_peekBytes","loose","alignedLength","Math","ceil","subReader","readBytes","readValue","AddressCoder","super","defaultValue","encode","decode","reader","toHexString","AnonymousCoder","coder","undefined","pack","coders","values","arrayValues","unique","map","argument","staticWriter","dynamicWriter","updateFuncs","forEach","dynamicOffset","updateFunc","baseOffset","func","unpack","baseReader","offsetReader","code","baseType","uniqueNames","reduce","accum","Error","Object","defineProperty","enumerable","get","freeze","ArrayCoder","defaultChild","count","checkArgumentCount","BooleanCoder","isZero","DynamicBytesCoder","BytesCoder","FixedBytesCoder","size","String","substring","NullCoder","NumberCoder","signed","v","maxUintValue","bounds","mask","gt","lt","add","mul","toTwos","fromTwos","StringCoder","TupleCoder","types","join","_constructorGuard","ModifiersBytes","calldata","memory","storage","ModifiersNest","checkModifier","indexOf","parseParamType","param","allowIndexed","originalParam","newNode","parent","node","allowType","indexed","replace","c","allowParams","verifyType","child","allowName","allowArray","sibling","readArray","populate","params","FormatTypes","sighash","minimal","full","json","paramTypeArray","RegExp","ParamType","constructorGuard","operation","arrayLength","arrayChildren","fromObject","_isParamType","format","comp","JSON","parse","stringify","fromString","isParamType","ParamTypify","parseParams","allowIndex","splitNesting","Fragment","_isFragment","isFragment","FunctionFragment","EventFragment","ConstructorFragment","ErrorFragment","trim","split","anonymous","inputs","input","isEventFragment","verifyIdentifier","regexParen","modifier","warn","parseGas","gas","comps","parseModifiers","constant","payable","stateMutability","verifyState","isConstructorFragment","parens","outputs","output","toString","isFunctionFragment","returns","checkForbidden","fragment","sig","isErrorFragment","regexIdentifier","depth","paramTypeBytes","paramTypeNumber","AbiCoder","_getCoder","component","_getWordSize","_getReader","_getWriter","getDefaultValue","from","defaultAbiCoder","LogDescription","TransactionDescription","ErrorDescription","Indexed","_isIndexed","BuiltinErrors","signature","reason","wrapAccessError","property","wrap","Interface","fragments","abi","bucket","deploy","functions","events","j","address","eventFragment","getFunction","nameOrSignatureOrSighash","getSighash","matching","keys","f","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","getEventTopic","getError","_","_decodeParams","_abiCoder","_encodeParams","encodeDeploy","decodeErrorResult","encodeErrorResult","decodeFunctionData","functionFragment","encodeFunctionData","decodeFunctionResult","errorArgs","errorName","errorSignature","selector","builtin","method","encodeFunctionResult","encodeFilterTopics","topics","encodeTopic","pop","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","expected","nonIndexed","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","parseTransaction","tx","args","parseLog","topic","parseError","hexData","errorFragment","_isInterface","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","e","rejected","done","then","apply","resolveName","resolver","nameOrPromise","resolveAddresses","paramType","all","makeError","populateTransaction","contract","overrides","signer","override","getAddress","check","provider","resolved","resolvedAddress","interface","to","ro","nonce","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","accessList","intrinsic","roValue","customData","ccipReadEnabled","leftovers","l","buildPopulate","buildEstimate","signerOrProvider","estimateGas","addContractWait","wait","bind","confirmations","receipt","logs","event","parsed","eventSignature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","buildCall","collapseSimple","blockTag","deployTransaction","_deployed","call","transaction","buildSend","txRequest","sendTransaction","buildDefault","getEventTag","RunningEvent","tag","_listeners","addListener","listener","once","item","removeAllListeners","listeners","listenerCount","run","argsCopy","setTimeout","prepareEvent","getEmit","ErrorRunningEvent","FragmentRunningEvent","contractInterface","decodeError","WildcardRunningEvent","BaseContract","addressOrName","uniqueFilters","filters","catch","uniqueSignatures","callStatic","signatures","isInterface","deployed","_deployedPromise","getCode","contractAddress","fallback","connect","attach","isIndexed","_normalizeRunningEvent","runningEvent","_runningEvents","_getRunningEvent","eventName","_checkRunningEvents","emit","_wrappedEmits","off","_wrapEvent","_addEventListener","wrappedEmit","on","queryFilter","fromBlockOrBlockhash","toBlock","fromBlock","getLogs","Contract","Zero","NegativeOne","throwFault","fault","zeros","getMultiplier","decimals","multiplier","negative","fraction","mod","whole","div","parseFixed","wholeValue","fractionValue","wei","FixedFormat","width","_multiplier","FixedNumber","hex","_hex","_value","_isFixedNumber","_checkFormat","other","addUnsafe","a","b","fromValue","subUnsafe","sub","mulUnsafe","divUnsafe","floor","hasFraction","isNegative","ONE","toFormat","ceiling","round","factor","bump","BUMP","toUnsafeFloat","parseFloat","fixedFormat","numeric","decimal","fromBytes","names","parseUnits","unitName","usdc","internalType","ethereum","window","send","getSigner","usdcContract","amt","Number","toFixed","transfer","err","s","height","d","proposal","proposalType","startDate","endDate","meta","lastName","emailAddress","props","AppShell","FormKyc","FormApply","AppContent","FormProposal","kycApproved","salonUnits","render"],"sourceRoot":""}