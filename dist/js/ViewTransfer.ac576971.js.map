{"version":3,"file":"js/ViewTransfer.ac576971.js","mappings":"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UACdze,KAAM,aACNC,KAAM,WAER,CACEoI,SAAS,EACToW,aAAc,UACdze,KAAM,QACNC,KAAM,YAGVD,KAAM,wBACNC,KAAM,SAER,CACEiL,WAAW,EACXC,OAAQ,CACN,CACE9C,SAAS,EACToW,aAAc,UACdze,KAAM,aACNC,KAAM,WAER,CACEoI,SAAS,EACToW,aAAc,UACdze,KAAM,QACNC,KAAM,YAGVD,KAAM,oBACNC,KAAM,SAER,CACEiL,WAAW,EACXC,OAAQ,CACN,CACE9C,SAAS,EACToW,aAAc,UACdze,KAAM,WACNC,KAAM,YAGVD,KAAM,cACNC,KAAM,SAER,CACEiL,WAAW,EACXC,OAAQ,CACN,CACE9C,SAAS,EACToW,aAAc,UACdze,KAAM,iBACNC,KAAM,YAGVD,KAAM,qBACNC,KAAM,SAER,CACEiL,WAAW,EACXC,OAAQ,CACN,CACE9C,SAAS,EACToW,aAAc,UACdze,KAAM,SACNC,KAAM,WAER,CACEoI,SAAS,EACToW,aAAc,UACdze,KAAM,SACNC,KAAM,YAGVD,KAAM,OACNC,KAAM,SAER,CACEiL,WAAW,EACXC,OAAQ,CACN,CACE9C,SAAS,EACToW,aAAc,UACdze,KAAM,kBACNC,KAAM,YAGVD,KAAM,sBACNC,KAAM,SAER,CACEiL,WAAW,EACXC,OAAQ,CACN,CACE9C,SAAS,EACToW,aAAc,UACdze,KAAM,SACNC,KAAM,WAER,CAAEoI,SAAS,EAAMoW,aAAc,UAAWze,KAAM,KAAMC,KAAM,WAC5D,CACEoI,SAAS,EACToW,aAAc,UACdze,KAAM,SACNC,KAAM,YAGVD,KAAM,OACNC,KAAM,SAER,CACEiL,WAAW,EACXC,OAAQ,CACN,CACE9C,SAAS,EACToW,aAAc,UACdze,KAAM,SACNC,KAAM,WAER,CACEoI,SAAS,EACToW,aAAc,UACdze,KAAM,sBACNC,KAAM,YAGVD,KAAM,mBACNC,KAAM,SAER,CACEiL,WAAW,EACXC,OAAQ,CACN,CACE9C,SAAS,EACToW,aAAc,UACdze,KAAM,YACNC,KAAM,YAGVD,KAAM,gBACNC,KAAM,SAER,CACEiL,WAAW,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","sources":["webpack://Salon/./src/views/ViewTransfer.vue","webpack://Salon/./src/views/ViewTransfer.vue?96bf","webpack://Salon/./src/views/ViewTreasury.vue","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/_version.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/coders/address.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/coders/array.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/coders/boolean.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/coders/null.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/coders/number.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/coders/string.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/coders/tuple.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/fragments.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/abi-coder.js","webpack://Salon/./node_modules/@ethersproject/abi/lib.esm/interface.js","webpack://Salon/./node_modules/@ethersproject/contracts/lib.esm/_version.js","webpack://Salon/./node_modules/@ethersproject/contracts/lib.esm/index.js","webpack://Salon/./node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js","webpack://Salon/./node_modules/@ethersproject/units/lib.esm/_version.js","webpack://Salon/./node_modules/@ethersproject/units/lib.esm/index.js","webpack://Salon/./src/abi/usdc.js","webpack://Salon/./src/views/ViewTreasury.vue?f345"],"sourcesContent":["<template>\n  <AppShell :colors=\"colors\" :isLoaded=\"true\" :protected=\"true\">\n    <div v-if=\"!isDone\">\n      <AppForm :url=\"uri\" @success=\"isDone = true\" />\n    </div>\n    <div class=\"pt-32 px-3\" v-show=\"isDone\">\n      <p>Thank You</p>\n      <p>Invest proposal has been submitted.</p>\n    </div>\n  </AppShell>\n</template>\n\n<script>\n// @ is an alias to /src\nimport AppShell from \"@/components/AppShell.vue\";\nimport AppForm from \"@/components/AppForm\";\nexport default {\n  components: { AppShell, AppForm },\n  data() {\n    return {\n      colors: [\"white\", \"black\"],\n      isDone: false,\n    };\n  },\n  computed: {\n    uri() {\n      return process.env.VUE_APP_URI + \"/form/transfer?cache=true\";\n    },\n  },\n};\n</script>\n","import { render } from \"./ViewTransfer.vue?vue&type=template&id=7b6dba47\"\nimport script from \"./ViewTransfer.vue?vue&type=script&lang=js\"\nexport * from \"./ViewTransfer.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/tk/oz.salon.dapp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <AppShell :colors=\"colors\" :isLoaded=\"isDone\" :protected=\"true\">\n    <AppContent class=\"items-center justify-center font-haffer\">\n      <div class=\"grid grid-cols-12 w-full font-haffer\">\n        <div class=\"app-frame\">\n          <div class=\"border-b border-black p-1 text-xs sm:text-base\">\n            <span>Collection</span\n            ><span class=\"float-right\">{{\n              format.format(treasury.collectionValue)\n            }}</span>\n          </div>\n          <div class=\"border-b border-black p-1 text-xs sm:text-base\">\n            <span>USD</span\n            ><span class=\"float-right\">{{\n              format.format(treasury.balance)\n            }}</span>\n          </div>\n\n          <div class=\"border-b border-black p-1 text-xs sm:text-base\">\n            <span>USDC</span\n            ><span class=\"float-right\">\n              {{ balanceInUsdc }}\n            </span>\n          </div>\n          <div class=\"border-b border-black p-1 text-xs sm:text-base\">\n            <span>Total Balance USD</span\n            ><span class=\"float-right\">{{\n              format.format(treasury.collectionValue + treasury.balance)\n            }}</span>\n          </div>\n          <div class=\"border-b border-black p-1 text-xs sm:text-base\">\n            <span>Total Units</span\n            ><span class=\"float-right\">{{ treasury.totalUnits }}</span>\n          </div>\n          <div class=\"border-b border-black p-1 text-xs sm:text-base\">\n            <span>Per Unit</span\n            ><span class=\"float-right\">\n              {{\n                format.format(\n                  (treasury.collectionValue + treasury.balance) /\n                    treasury.totalUnits\n                )\n              }}</span\n            >\n          </div>\n        </div>\n      </div>\n    </AppContent>\n  </AppShell>\n</template>\n\n<script>\n// @ is an alias to /src\nimport axios from \"axios\";\nimport AppShell from \"@/components/AppShell\";\nimport AppContent from \"@/components/AppContent\";\nimport { ethers } from \"ethers\";\nimport { abi as USDC_ABI } from \"@/abi/usdc\";\nexport default {\n  components: { AppShell, AppContent },\n  data() {\n    return {\n      colors: [\"white\", \"black\"],\n      treasury: {},\n      balanceInEth: 0,\n      balanceInUsdc: 0,\n      format: new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }),\n      isDone: false,\n    };\n  },\n  async beforeMount() {\n    console.log(\"treasury load!\");\n    //Treasury Data\n    try {\n      const res = await axios.get(\n        process.env.VUE_APP_URI + \"/treasury?cache=true\"\n      );\n      this.treasury = res.data.message;\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n\n    //ETH Balance\n    let ethereum = window.ethereum;\n    let provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    await provider.send(\"eth_requestAccounts\", []);\n    const eth = await provider.getBalance(\n      \"0xc0725b883d23f146f82d49f3ba45a6b4c7ddd7ce\"\n    );\n    this.balanceInEth = ethers.utils.formatEther(eth);\n\n    //USDC Balance\n    var usdc = {\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n      abi: USDC_ABI,\n    };\n\n    const usdcContract = new ethers.Contract(usdc.address, usdc.abi, signer);\n    let usdcBalance = await usdcContract.balanceOf(\n      \"0xc0725b883d23f146f82d49f3ba45a6b4c7ddd7ce\"\n    );\n    this.balanceInUsdc = parseInt(usdcBalance.toString()) / 10 ** 6;\n    this.isDone = true;\n  },\n};\n</script>\n","export const version = \"abi/5.6.3\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nexport function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nexport class Coder {\n    constructor(name, type, localName, dynamic) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n    _throwError(message, value) {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n}\nexport class Writer {\n    constructor(wordSize) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n    get data() {\n        return hexConcat(this._data);\n    }\n    get length() { return this._dataLength; }\n    _writeData(data) {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n    appendWriter(writer) {\n        return this._writeData(concat(writer._data));\n    }\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value) {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n        }\n        return this._writeData(bytes);\n    }\n    _getValue(value) {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n        }\n        return bytes;\n    }\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value) {\n        return this._writeData(this._getValue(value));\n    }\n    writeUpdatableValue() {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\nexport class Reader {\n    constructor(data, wordSize, coerceFunc, allowLoose) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n        this._offset = 0;\n    }\n    get data() { return hexlify(this._data); }\n    get consumed() { return this._offset; }\n    // The default Coerce function\n    static coerce(name, value) {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) {\n            value = value.toNumber();\n        }\n        return value;\n    }\n    coerce(name, value) {\n        if (this._coerceFunc) {\n            return this._coerceFunc(name, value);\n        }\n        return Reader.coerce(name, value);\n    }\n    _peekBytes(offset, length, loose) {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            }\n            else {\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n    subReader(offset) {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n    readBytes(length, loose) {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    readValue() {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n//# sourceMappingURL=abstract-coder.js.map","\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class AddressCoder extends Coder {\n    constructor(localName) {\n        super(\"address\", \"address\", localName, false);\n    }\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n    encode(writer, value) {\n        try {\n            value = getAddress(value);\n        }\n        catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n}\n//# sourceMappingURL=address.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\n// Clones the functionality of an existing Coder, but without a localName\nexport class AnonymousCoder extends Coder {\n    constructor(coder) {\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n    defaultValue() {\n        return this.coder.defaultValue();\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n}\n//# sourceMappingURL=anonymous.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n    let arrayValues = null;\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nexport function unpack(reader, coders) {\n    let values = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) {\n                accum[name] = 0;\n            }\n            accum[name]++;\n        }\n        return accum;\n    }, {});\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder, index) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        const value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n    return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        this.coder = coder;\n        this.length = length;\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n//# sourceMappingURL=array.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nexport class BooleanCoder extends Coder {\n    constructor(localName) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n    defaultValue() {\n        return false;\n    }\n    encode(writer, value) {\n        return writer.writeValue(value ? 1 : 0);\n    }\n    decode(reader) {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n    }\n}\n//# sourceMappingURL=boolean.js.map","\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class DynamicBytesCoder extends Coder {\n    constructor(type, localName) {\n        super(type, type, localName, true);\n    }\n    defaultValue() {\n        return \"0x\";\n    }\n    encode(writer, value) {\n        value = arrayify(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    }\n}\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"bytes\", localName);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(super.decode(reader)));\n    }\n}\n//# sourceMappingURL=bytes.js.map","\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n    constructor(size, localName) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n    defaultValue() {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n    encode(writer, value) {\n        let data = arrayify(value);\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n    }\n}\n//# sourceMappingURL=fixed-bytes.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nexport class NullCoder extends Coder {\n    constructor(localName) {\n        super(\"null\", \"\", localName, false);\n    }\n    defaultValue() {\n        return null;\n    }\n    encode(writer, value) {\n        if (value != null) {\n            this._throwError(\"not null\", value);\n        }\n        return writer.writeBytes([]);\n    }\n    decode(reader) {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n    }\n}\n//# sourceMappingURL=null.js.map","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\nimport { Coder } from \"./abstract-coder\";\nexport class NumberCoder extends Coder {\n    constructor(size, signed, localName) {\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\n        super(name, name, localName, false);\n        this.size = size;\n        this.signed = signed;\n    }\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, value) {\n        let v = BigNumber.from(value);\n        // Check bounds are safe for encoding\n        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        }\n        else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n        return writer.writeValue(v);\n    }\n    decode(reader) {\n        let value = reader.readValue().mask(this.size * 8);\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n        return reader.coerce(this.name, value);\n    }\n}\n//# sourceMappingURL=number.js.map","\"use strict\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { DynamicBytesCoder } from \"./bytes\";\nexport class StringCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"string\", localName);\n    }\n    defaultValue() {\n        return \"\";\n    }\n    encode(writer, value) {\n        return super.encode(writer, toUtf8Bytes(value));\n    }\n    decode(reader) {\n        return toUtf8String(super.decode(reader));\n    }\n}\n//# sourceMappingURL=string.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, value) {\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n//# sourceMappingURL=tuple.js.map","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nconst _constructorGuard = {};\nlet ModifiersBytes = { calldata: true, memory: true, storage: true };\nlet ModifiersNest = { calldata: true, memory: true };\nfunction checkModifier(type, name) {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) {\n            return true;\n        }\n    }\n    else if (type === \"address\") {\n        if (name === \"payable\") {\n            return true;\n        }\n    }\n    else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) {\n            return true;\n        }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param, allowIndexed) {\n    let originalParam = param;\n    function throwError(i) {\n        logger.throwArgumentError(`unexpected character at position ${i}`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n    function newNode(parent) {\n        let node = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) {\n            node.indexed = false;\n        }\n        return node;\n    }\n    let parent = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                }\n                else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [newNode(node)];\n                node = node.components[0];\n                break;\n            case \")\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let child = node;\n                node = node.parent;\n                if (!node) {\n                    throwError(i);\n                }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n            case \",\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let sibling = newNode(node.parent);\n                //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n            // Hit a space...\n            case \" \":\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) {\n                                throwError(i);\n                            }\n                            if (node.indexed) {\n                                throwError(i);\n                            }\n                            node.indexed = true;\n                            node.name = \"\";\n                        }\n                        else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        }\n                        else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n                break;\n            case \"[\":\n                if (!node.state.allowArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n            case \"]\":\n                if (!node.state.readArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                }\n                else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                }\n                else if (node.state.readArray) {\n                    node.type += c;\n                }\n                else {\n                    throwError(i);\n                }\n        }\n    }\n    if (node.parent) {\n        logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n    }\n    delete parent.state;\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) {\n            throwError(originalParam.length - 7);\n        }\n        if (node.indexed) {\n            throwError(originalParam.length - 7);\n        }\n        node.indexed = true;\n        node.name = \"\";\n    }\n    else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n    parent.type = verifyType(parent.type);\n    return parent;\n}\nfunction populate(object, params) {\n    for (let key in params) {\n        defineReadOnly(object, key, params[key]);\n    }\n}\nexport const FormatTypes = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n    // JSON-format a la Solidity\n    json: \"json\"\n});\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nexport class ParamType {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new ParamType()\"\n            });\n        }\n        populate(this, params);\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        }\n        else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\" : this.type)\n            });\n        }\n        this._isParamType = true;\n        Object.freeze(this);\n    }\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            let result = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n        }\n        else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    static from(value, allowIndexed) {\n        if (typeof (value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ParamType.isParamType(value)) {\n            return value;\n        }\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null : !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject) : null)\n        });\n    }\n    static fromString(value, allowIndexed) {\n        function ParamTypify(node) {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n    static isParamType(value) {\n        return !!(value != null && value._isParamType);\n    }\n}\n;\nfunction parseParams(value, allowIndex) {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\nexport class Fragment {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n        this._isFragment = true;\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n        return Fragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n    static fromString(value) {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n        if (value.split(\" \")[0] === \"event\") {\n            return EventFragment.fromString(value.substring(5).trim());\n        }\n        else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        }\n        else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        }\n        else if (value.split(\" \")[0] === \"error\") {\n            return ErrorFragment.fromString(value.substring(5).trim());\n        }\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n    static isFragment(value) {\n        return !!(value && value._isFragment);\n    }\n}\nexport class EventFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (EventFragment.isEventFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n        const params = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n        return new EventFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch (modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n    static isEventFragment(value) {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\nfunction parseGas(value, params) {\n    params.gas = null;\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n    return value;\n}\nfunction parseModifiers(value, params) {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\nfunction verifyState(value) {\n    let result = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n    }\n    else if (value.payable != null) {\n        result.payable = !!value.payable;\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n        result.constant = !!value.constant;\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        }\n        else {\n            result.stateMutability = (result.payable ? \"payable\" : \"nonpayable\");\n        }\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n    }\n    else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\" : \"payable\");\n    }\n    else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    return result;\n}\nexport class ConstructorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n        let result = \"constructor(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ConstructorFragment.isConstructorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n        const params = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"constructor\" };\n        value = parseGas(value, params);\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n        params.inputs = parseParams(parens[2].trim(), false);\n        parseModifiers(parens[3].trim(), params);\n        return ConstructorFragment.fromObject(params);\n    }\n    static isConstructorFragment(value) {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\nexport class FunctionFragment extends ConstructorFragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            }\n            else if (this.constant) {\n                result += \"view \";\n            }\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map((output) => output.format(format)).join(\", \") + \") \";\n            }\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (FunctionFragment.isFunctionFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new FunctionFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"function\" };\n        value = parseGas(value, params);\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        parseModifiers(parens[3].trim(), params);\n        // We have outputs\n        if (comps.length > 1) {\n            let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        }\n        else {\n            params.outputs = [];\n        }\n        return FunctionFragment.fromObject(params);\n    }\n    static isFunctionFragment(value) {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n//export class StructFragment extends Fragment {\n//}\nfunction checkForbidden(fragment) {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(`cannot specify user defined ${sig} error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\nexport class ErrorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ErrorFragment.isErrorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])\n        };\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n    static fromString(value) {\n        let params = { type: \"error\" };\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n    static isErrorFragment(value) {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\nfunction verifyType(type) {\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    }\n    else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n    // @TODO: more verification\n    return type;\n}\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value) {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${value}\"`, \"value\", value);\n    }\n    return value;\n}\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nfunction splitNesting(value) {\n    value = value.trim();\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        }\n        else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            }\n            else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) {\n        result.push(accum);\n    }\n    return result;\n}\n//# sourceMappingURL=fragments.js.map","\"use strict\";\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport class AbiCoder {\n    constructor(coerceFunc) {\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n    _getCoder(param) {\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n    _getWordSize() { return 32; }\n    _getReader(data, allowLoose) {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n    _getWriter() {\n        return new Writer(this._getWordSize());\n    }\n    getDefaultValue(types) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    encode(types, values) {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    decode(types, data, loose) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\nexport const defaultAbiCoder = new AbiCoder();\n//# sourceMappingURL=abi-coder.js.map","\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class ErrorDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nconst BuiltinErrors = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [\"string\"], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [\"uint256\"] }\n};\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    constructor(fragments) {\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(fragment) {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n            return this.errors[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment) {\n        if (typeof (fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            }\n            catch (error) {\n                try {\n                    fragment = this.getError(fragment);\n                }\n                catch (_) {\n                    throw error;\n                }\n            }\n        }\n        return getStatic(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    decodeErrorResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n    encodeErrorResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [])\n        ]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let message = \"\";\n        let errorArgs = null;\n        let errorName = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) {\n                        reason = errorArgs[0];\n                    }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n                    }\n                    else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n                    }\n                }\n                else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    }\n                    catch (error) { }\n                }\n                break;\n            }\n        }\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    parseError(data) {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n//# sourceMappingURL=interface.js.map","export const version = \"contracts/5.6.2\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n///////////////////////////////\nconst allowedTransactionKeys = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const name = yield nameOrPromise;\n        if (typeof (name) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n        }\n        // If it is already an address, just use it (after adding checksum)\n        try {\n            return getAddress(name);\n        }\n        catch (error) { }\n        if (!resolver) {\n            logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"resolveName\"\n            });\n        }\n        const address = yield resolver.resolveName(name);\n        if (address == null) {\n            logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n        }\n        return address;\n    });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (Array.isArray(paramType)) {\n            return yield Promise.all(paramType.map((paramType, index) => {\n                return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);\n            }));\n        }\n        if (paramType.type === \"address\") {\n            return yield resolveName(resolver, value);\n        }\n        if (paramType.type === \"tuple\") {\n            return yield resolveAddresses(resolver, value, paramType.components);\n        }\n        if (paramType.baseType === \"array\") {\n            if (!Array.isArray(value)) {\n                return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"value\",\n                    value\n                }));\n            }\n            return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n        }\n        return value;\n    });\n}\nfunction populateTransaction(contract, fragment, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // If an extra argument is given, it is overrides\n        let overrides = {};\n        if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            overrides = shallowCopy(args.pop());\n        }\n        // Make sure the parameter count matches\n        logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n        // Populate \"from\" override (allow promises)\n        if (contract.signer) {\n            if (overrides.from) {\n                // Contracts with a Signer are from the Signer's frame-of-reference;\n                // but we allow overriding \"from\" if it matches the signer\n                overrides.from = resolveProperties({\n                    override: resolveName(contract.signer, overrides.from),\n                    signer: contract.signer.getAddress()\n                }).then((check) => __awaiter(this, void 0, void 0, function* () {\n                    if (getAddress(check.signer) !== check.override) {\n                        logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"overrides.from\"\n                        });\n                    }\n                    return check.override;\n                }));\n            }\n            else {\n                overrides.from = contract.signer.getAddress();\n            }\n        }\n        else if (overrides.from) {\n            overrides.from = resolveName(contract.provider, overrides.from);\n            //} else {\n            // Contracts without a signer can override \"from\", and if\n            // unspecified the zero address is used\n            //overrides.from = AddressZero;\n        }\n        // Wait for all dependencies to be resolved (prefer the signer over the provider)\n        const resolved = yield resolveProperties({\n            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n            address: contract.resolvedAddress,\n            overrides: (resolveProperties(overrides) || {})\n        });\n        // The ABI coded transaction\n        const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n        const tx = {\n            data: data,\n            to: resolved.address\n        };\n        // Resolved Overrides\n        const ro = resolved.overrides;\n        // Populate simple overrides\n        if (ro.nonce != null) {\n            tx.nonce = BigNumber.from(ro.nonce).toNumber();\n        }\n        if (ro.gasLimit != null) {\n            tx.gasLimit = BigNumber.from(ro.gasLimit);\n        }\n        if (ro.gasPrice != null) {\n            tx.gasPrice = BigNumber.from(ro.gasPrice);\n        }\n        if (ro.maxFeePerGas != null) {\n            tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n        }\n        if (ro.maxPriorityFeePerGas != null) {\n            tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n        }\n        if (ro.from != null) {\n            tx.from = ro.from;\n        }\n        if (ro.type != null) {\n            tx.type = ro.type;\n        }\n        if (ro.accessList != null) {\n            tx.accessList = accessListify(ro.accessList);\n        }\n        // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n        if (tx.gasLimit == null && fragment.gas != null) {\n            // Compute the intrinsic gas cost for this transaction\n            // @TODO: This is based on the yellow paper as of Petersburg; this is something\n            // we may wish to parameterize in v6 as part of the Network object. Since this\n            // is always a non-nil to address, we can ignore G_create, but may wish to add\n            // similar logic to the ContractFactory.\n            let intrinsic = 21000;\n            const bytes = arrayify(data);\n            for (let i = 0; i < bytes.length; i++) {\n                intrinsic += 4;\n                if (bytes[i]) {\n                    intrinsic += 64;\n                }\n            }\n            tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n        }\n        // Populate \"value\" override\n        if (ro.value) {\n            const roValue = BigNumber.from(ro.value);\n            if (!roValue.isZero() && !fragment.payable) {\n                logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: overrides.value\n                });\n            }\n            tx.value = roValue;\n        }\n        if (ro.customData) {\n            tx.customData = shallowCopy(ro.customData);\n        }\n        if (ro.ccipReadEnabled) {\n            tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n        }\n        // Remove the overrides\n        delete overrides.nonce;\n        delete overrides.gasLimit;\n        delete overrides.gasPrice;\n        delete overrides.from;\n        delete overrides.value;\n        delete overrides.type;\n        delete overrides.accessList;\n        delete overrides.maxFeePerGas;\n        delete overrides.maxPriorityFeePerGas;\n        delete overrides.customData;\n        delete overrides.ccipReadEnabled;\n        // Make sure there are no stray overrides, which may indicate a\n        // typo or using an unsupported key.\n        const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));\n        if (leftovers.length) {\n            logger.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides\",\n                overrides: leftovers\n            });\n        }\n        return tx;\n    });\n}\nfunction buildPopulate(contract, fragment) {\n    return function (...args) {\n        return populateTransaction(contract, fragment, args);\n    };\n}\nfunction buildEstimate(contract, fragment) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!signerOrProvider) {\n                logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"estimateGas\"\n                });\n            }\n            const tx = yield populateTransaction(contract, fragment, args);\n            return yield signerOrProvider.estimateGas(tx);\n        });\n    };\n}\nfunction addContractWait(contract, tx) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations) => {\n        return wait(confirmations).then((receipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event = deepCopy(log);\n                let parsed = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                }\n                catch (e) { }\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data, topics) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n                // Useful operations\n                event.removeListener = () => { return contract.provider; };\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                };\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                };\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                };\n                return event;\n            });\n            return receipt;\n        });\n    };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Extract the \"blockTag\" override if present\n            let blockTag = undefined;\n            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n                const overrides = shallowCopy(args.pop());\n                if (overrides.blockTag != null) {\n                    blockTag = yield overrides.blockTag;\n                }\n                delete overrides.blockTag;\n                args.push(overrides);\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed(blockTag);\n            }\n            // Call a node and get the result\n            const tx = yield populateTransaction(contract, fragment, args);\n            const result = yield signerOrProvider.call(tx, blockTag);\n            try {\n                let value = contract.interface.decodeFunctionResult(fragment, result);\n                if (collapseSimple && fragment.outputs.length === 1) {\n                    value = value[0];\n                }\n                return value;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    error.address = contract.address;\n                    error.args = args;\n                    error.transaction = tx;\n                }\n                throw error;\n            }\n        });\n    };\n}\nfunction buildSend(contract, fragment) {\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!contract.signer) {\n                logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"sendTransaction\"\n                });\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed();\n            }\n            const txRequest = yield populateTransaction(contract, fragment, args);\n            const tx = yield contract.signer.sendTransaction(txRequest);\n            // Tweak the tx.wait so the receipt has extra properties\n            addContractWait(contract, tx);\n            return tx;\n        });\n    };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\") : \"\");\n}\nclass RunningEvent {\n    constructor(tag, filter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [];\n    }\n    addListener(listener, once) {\n        this._listeners.push({ listener: listener, once: once });\n    }\n    removeListener(listener) {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) {\n                return true;\n            }\n            done = true;\n            return false;\n        });\n    }\n    removeAllListeners() {\n        this._listeners = [];\n    }\n    listeners() {\n        return this._listeners.map((i) => i.listener);\n    }\n    listenerCount() {\n        return this._listeners.length;\n    }\n    run(args) {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n            const argsCopy = args.slice();\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n        return listenerCount;\n    }\n    prepareEvent(event) {\n    }\n    // Returns the array that will be applied to an emit\n    getEmit(event) {\n        return [event];\n    }\n}\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    constructor(address, contractInterface, fragment, topics) {\n        const filter = {\n            address: address\n        };\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) {\n                logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n            }\n            filter.topics = topics.slice();\n        }\n        else {\n            filter.topics = [topic];\n        }\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n        event.decode = (data, topics) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        }\n        catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n    getEmit(event) {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) {\n            throw errors[0].error;\n        }\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    constructor(address, contractInterface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n            event.decode = (data, topics) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n            event.args = parsed.args;\n        }\n        catch (error) {\n            // No matching event\n        }\n    }\n}\nexport class BaseContract {\n    constructor(addressOrName, contractInterface, signerOrProvider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        }\n        else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n        defineReadOnly(this, \"callStatic\", {});\n        defineReadOnly(this, \"estimateGas\", {});\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"populateTransaction\", {});\n        defineReadOnly(this, \"filters\", {});\n        {\n            const uniqueFilters = {};\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                    };\n                });\n                if (!uniqueFilters[event.name]) {\n                    uniqueFilters[event.name] = [];\n                }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                }\n                else {\n                    logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n                }\n            });\n        }\n        defineReadOnly(this, \"_runningEvents\", {});\n        defineReadOnly(this, \"_wrappedEmits\", {});\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        }\n        else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            }\n            catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n        const uniqueNames = {};\n        const uniqueSignatures = {};\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${name}`]) {\n                    uniqueNames[`%${name}`] = [];\n                }\n                uniqueNames[`%${name}`].push(signature);\n            }\n            if (this[signature] == null) {\n                defineReadOnly(this, signature, buildDefault(this, fragment, true));\n            }\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) {\n                return;\n            }\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n            const signature = signatures[0];\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if (this[name] == null) {\n                    defineReadOnly(this, name, this[signature]);\n                }\n            }\n            catch (e) { }\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n    static getContractAddress(transaction) {\n        return getContractAddress(transaction);\n    }\n    static getInterface(contractInterface) {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n    // @TODO: Allow timeout?\n    deployed() {\n        return this._deployed();\n    }\n    _deployed(blockTag) {\n        if (!this._deployedPromise) {\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n            }\n            else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n        return this._deployedPromise;\n    }\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n    fallback(overrides) {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" });\n        }\n        const tx = shallowCopy(overrides || {});\n        [\"from\", \"to\"].forEach(function (key) {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider) {\n        if (typeof (signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n        const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    }\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName) {\n        return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);\n    }\n    static isIndexed(value) {\n        return Indexed.isIndexed(value);\n    }\n    _normalizeRunningEvent(runningEvent) {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n        }\n        return runningEvent;\n    }\n    _getRunningEvent(eventName) {\n        if (typeof (eventName) === \"string\") {\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName);\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof (topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            }\n            catch (error) { }\n            // Filter by the unknown topichash\n            const filter = {\n                address: this.address,\n                topics: eventName.topics\n            };\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n    _checkRunningEvents(runningEvent) {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent, log, listener) {\n        const event = deepCopy(log);\n        event.removeListener = () => {\n            if (!listener) {\n                return;\n            }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); };\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n        return event;\n    }\n    _addEventListener(runningEvent, listener, once) {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" });\n        }\n        runningEvent.addListener(listener, once);\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    }\n                    catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n    queryFilter(event, fromBlockOrBlockhash, toBlock) {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n        if (typeof (fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            filter.blockHash = fromBlockOrBlockhash;\n        }\n        else {\n            filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);\n            filter.toBlock = ((toBlock != null) ? toBlock : \"latest\");\n        }\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n    on(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n    once(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n    emit(eventName, ...args) {\n        if (!this.provider) {\n            return false;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!this.provider) {\n            return 0;\n        }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n    listeners(eventName) {\n        if (!this.provider) {\n            return [];\n        }\n        if (eventName == null) {\n            const result = [];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener);\n                });\n            }\n            return result;\n        }\n        return this._getRunningEvent(eventName).listeners();\n    }\n    removeAllListeners(eventName) {\n        if (!this.provider) {\n            return this;\n        }\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    off(eventName, listener) {\n        if (!this.provider) {\n            return this;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n}\nexport class Contract extends BaseContract {\n}\nexport class ContractFactory {\n    constructor(contractInterface, bytecode, signer) {\n        let bytecodeHex = null;\n        if (typeof (bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        }\n        else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        }\n        else if (bytecode && typeof (bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = bytecode.object;\n        }\n        else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") {\n            bytecodeHex = \"0x\" + bytecodeHex;\n        }\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args) {\n        let tx = {};\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n        return tx;\n    }\n    deploy(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let overrides = {};\n            // If 1 extra parameter was passed in, it contains overrides\n            if (args.length === this.interface.deploy.inputs.length + 1) {\n                overrides = args.pop();\n            }\n            // Make sure the call matches the constructor signature\n            logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n            // Resolve ENS names and promises in the arguments\n            const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n            params.push(overrides);\n            // Get the deployment transaction (with optional overrides)\n            const unsignedTx = this.getDeployTransaction(...params);\n            // Send the deployment transaction\n            const tx = yield this.signer.sendTransaction(unsignedTx);\n            const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n            const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n            // Add the modified wait that wraps events\n            addContractWait(contract, tx);\n            defineReadOnly(contract, \"deployTransaction\", tx);\n            return contract;\n        });\n    }\n    attach(address) {\n        return (this.constructor).getContract(address, this.interface, this.signer);\n    }\n    connect(signer) {\n        return new (this.constructor)(this.interface, this.bytecode, signer);\n    }\n    static fromSolidity(compilerOutput, signer) {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n        if (typeof (compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n        const abi = compilerOutput.abi;\n        let bytecode = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        }\n        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n        return new this(abi, bytecode, signer);\n    }\n    static getInterface(contractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n    static getContractAddress(tx) {\n        return getContractAddress(tx);\n    }\n    static getContract(address, contractInterface, signer) {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport { arrayify, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BigNumber, isBigNumberish } from \"./bignumber\";\nconst _constructorGuard = {};\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\nfunction throwFault(message, fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value !== undefined) {\n        params.value = value;\n    }\n    return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) {\n    zeros += zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals) {\n    if (typeof (decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        }\n        catch (e) { }\n    }\n    if (typeof (decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\nexport function formatFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n    const negative = value.lt(Zero);\n    if (negative) {\n        value = value.mul(NegativeOne);\n    }\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) {\n        fraction = \"0\" + fraction;\n    }\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    const whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n        value = whole;\n    }\n    else {\n        value = whole + \".\" + fraction;\n    }\n    if (negative) {\n        value = \"-\" + value;\n    }\n    return value;\n}\nexport function parseFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    if (typeof (value) !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) {\n        value = value.substring(1);\n    }\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) {\n        whole = \"0\";\n    }\n    if (!fraction) {\n        fraction = \"0\";\n    }\n    // Trim trailing zeros\n    while (fraction[fraction.length - 1] === \"0\") {\n        fraction = fraction.substring(0, fraction.length - 1);\n    }\n    // Check the fraction doesn't exceed our decimals size\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n    // If decimals is 0, we have an empty string for fraction\n    if (fraction === \"\") {\n        fraction = \"0\";\n    }\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) {\n        fraction += \"0\";\n    }\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n    if (negative) {\n        wei = wei.mul(NegativeOne);\n    }\n    return wei;\n}\nexport class FixedFormat {\n    constructor(constructorGuard, signed, width, decimals) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n        this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n        this._multiplier = getMultiplier(decimals);\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (value instanceof FixedFormat) {\n            return value;\n        }\n        if (typeof (value) === \"number\") {\n            value = `fixed128x${value}`;\n        }\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n        if (typeof (value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            }\n            else if (value === \"ufixed\") {\n                signed = false;\n            }\n            else {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) {\n                    logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n                }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        }\n        else if (value) {\n            const check = (key, type, defaultValue) => {\n                if (value[key] == null) {\n                    return defaultValue;\n                }\n                if (typeof (value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            };\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n}\nexport class FixedNumber {\n    constructor(constructorGuard, hex, value, format) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n        this._isFixedNumber = true;\n        Object.freeze(this);\n    }\n    _checkFormat(other) {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n    addUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n    subUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n    mulUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n    divUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n    floor() {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    }\n    ceiling() {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    }\n    // @TODO: Support other rounding algorithms\n    round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        // If we are already in range, we're done\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n        if (comps[1].length <= decimals) {\n            return this;\n        }\n        const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n        const bump = BUMP.toFormat(this.format);\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n    isZero() {\n        return (this._value === \"0.0\" || this._value === \"0\");\n    }\n    isNegative() {\n        return (this._value[0] === \"-\");\n    }\n    toString() { return this._value; }\n    toHexString(width) {\n        if (width == null) {\n            return this._hex;\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n        }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n    toUnsafeFloat() { return parseFloat(this.toString()); }\n    toFormat(format) {\n        return FixedNumber.fromString(this._value, format);\n    }\n    static fromValue(value, decimals, format) {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n        if (decimals == null) {\n            decimals = 0;\n        }\n        if (format == null) {\n            format = \"fixed\";\n        }\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n    static fromString(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        const numeric = parseFixed(value, fixedFormat.decimals);\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n        let hex = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        }\n        else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static fromBytes(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) {\n            numeric = numeric.fromTwos(fixedFormat.width);\n        }\n        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static from(value, format) {\n        if (typeof (value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        }\n        catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n    static isFixedNumber(value) {\n        return !!(value && value._isFixedNumber);\n    }\n}\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");\n//# sourceMappingURL=fixednumber.js.map","export const version = \"units/5.6.1\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nexport function commify(value) {\n    const comps = String(value).split(\".\");\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") {\n        whole = whole.substring(1);\n    }\n    if (whole === \"\") {\n        whole = \"0\";\n    }\n    let suffix = \"\";\n    if (comps.length === 2) {\n        suffix = \".\" + (comps[1] || \"0\");\n    }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n    const formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        }\n        else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n    return negative + formatted.join(\",\") + suffix;\n}\nexport function formatUnits(value, unitName) {\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return formatFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function parseUnits(value, unitName) {\n    if (typeof (value) !== \"string\") {\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return parseFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function formatEther(wei) {\n    return formatUnits(wei, 18);\n}\nexport function parseEther(ether) {\n    return parseUnits(ether, 18);\n}\n//# sourceMappingURL=index.js.map","export let abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"authorizer\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"nonce\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"AuthorizationCanceled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"authorizer\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"nonce\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"AuthorizationUsed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"_account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Blacklisted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newBlacklister\",\n        type: \"address\",\n      },\n    ],\n    name: \"BlacklisterChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"burner\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Burn\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newMasterMinter\",\n        type: \"address\",\n      },\n    ],\n    name: \"MasterMinterChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"minter\",\n        type: \"address\",\n      },\n      { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Mint\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"minter\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"minterAllowedAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"MinterConfigured\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"oldMinter\",\n        type: \"address\",\n      },\n    ],\n    name: \"MinterRemoved\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  { anonymous: false, inputs: [], name: \"Pause\", type: \"event\" },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"PauserChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newRescuer\",\n        type: \"address\",\n      },\n    ],\n    name: \"RescuerChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"address\", name: \"from\", type: \"address\" },\n      { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"_account\",\n        type: \"address\",\n      },\n    ],\n    name: \"UnBlacklisted\",\n    type: \"event\",\n  },\n  { anonymous: false, inputs: [], name: \"Unpause\", type: \"event\" },\n  {\n    inputs: [],\n    name: \"CANCEL_AUTHORIZATION_TYPEHASH\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"RECEIVE_WITH_AUTHORIZATION_TYPEHASH\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n    ],\n    name: \"allowance\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n    ],\n    name: \"approve\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"authorizer\", type: \"address\" },\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\n    ],\n    name: \"authorizationState\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"_account\", type: \"address\" }],\n    name: \"blacklist\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"blacklister\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\n    name: \"burn\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"authorizer\", type: \"address\" },\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\n      { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\n      { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\n      { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" },\n    ],\n    name: \"cancelAuthorization\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"minter\", type: \"address\" },\n      { internalType: \"uint256\", name: \"minterAllowedAmount\", type: \"uint256\" },\n    ],\n    name: \"configureMinter\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"currency\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{ internalType: \"uint8\", name: \"\", type: \"uint8\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"decrement\", type: \"uint256\" },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"increment\", type: \"uint256\" },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"string\", name: \"tokenName\", type: \"string\" },\n      { internalType: \"string\", name: \"tokenSymbol\", type: \"string\" },\n      { internalType: \"string\", name: \"tokenCurrency\", type: \"string\" },\n      { internalType: \"uint8\", name: \"tokenDecimals\", type: \"uint8\" },\n      { internalType: \"address\", name: \"newMasterMinter\", type: \"address\" },\n      { internalType: \"address\", name: \"newPauser\", type: \"address\" },\n      { internalType: \"address\", name: \"newBlacklister\", type: \"address\" },\n      { internalType: \"address\", name: \"newOwner\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"string\", name: \"newName\", type: \"string\" }],\n    name: \"initializeV2\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"lostAndFound\", type: \"address\" },\n    ],\n    name: \"initializeV2_1\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"_account\", type: \"address\" }],\n    name: \"isBlacklisted\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n    name: \"isMinter\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"masterMinter\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"_to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n    ],\n    name: \"mint\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"minter\", type: \"address\" }],\n    name: \"minterAllowance\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\n    name: \"nonces\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pauser\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\n      { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\n      { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\n      { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\n      { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\n      { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\n      { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" },\n    ],\n    name: \"receiveWithAuthorization\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"minter\", type: \"address\" }],\n    name: \"removeMinter\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"tokenContract\",\n        type: \"address\",\n      },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n    ],\n    name: \"rescueERC20\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rescuer\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n    ],\n    name: \"transfer\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n    ],\n    name: \"transferFrom\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newOwner\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\n      { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\n      { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\n      { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" },\n    ],\n    name: \"transferWithAuthorization\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"_account\", type: \"address\" }],\n    name: \"unBlacklist\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"_newBlacklister\", type: \"address\" },\n    ],\n    name: \"updateBlacklister\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"_newMasterMinter\", type: \"address\" },\n    ],\n    name: \"updateMasterMinter\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"_newPauser\", type: \"address\" }],\n    name: \"updatePauser\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newRescuer\", type: \"address\" }],\n    name: \"updateRescuer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"version\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","import { render } from \"./ViewTreasury.vue?vue&type=template&id=4106b9f4\"\nimport script from \"./ViewTreasury.vue?vue&type=script&lang=js\"\nexport * from \"./ViewTreasury.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/tk/oz.salon.dapp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","colors","isLoaded","protected","isDone","url","uri","components","AppShell","AppForm","data","computed","__exports__","render","format","treasury","collectionValue","balance","balanceInUsdc","totalUnits","version","logger","checkResultErrors","result","errors","checkErrors","path","object","Array","isArray","key","childPath","slice","push","error","Coder","constructor","name","type","localName","dynamic","this","_throwError","message","value","throwArgumentError","Writer","wordSize","_data","_dataLength","_padding","Uint8Array","length","_writeData","appendWriter","writer","writeBytes","bytes","paddingOffset","_getValue","throwError","offset","writeValue","writeUpdatableValue","Reader","coerceFunc","allowLoose","_offset","consumed","static","match","parseInt","toNumber","coerce","_coerceFunc","_peekBytes","loose","alignedLength","Math","ceil","subReader","readBytes","readValue","AddressCoder","super","defaultValue","encode","decode","reader","toHexString","AnonymousCoder","coder","undefined","pack","coders","values","arrayValues","unique","map","argument","staticWriter","dynamicWriter","updateFuncs","forEach","index","dynamicOffset","updateFunc","baseOffset","func","unpack","baseReader","offsetReader","code","baseType","uniqueNames","reduce","accum","Error","Object","defineProperty","enumerable","get","i","freeze","ArrayCoder","defaultChild","count","checkArgumentCount","BooleanCoder","isZero","DynamicBytesCoder","BytesCoder","FixedBytesCoder","size","String","substring","NullCoder","NumberCoder","signed","v","maxUintValue","bounds","mask","gt","lt","add","mul","toTwos","fromTwos","StringCoder","TupleCoder","types","join","_constructorGuard","ModifiersBytes","calldata","memory","storage","ModifiersNest","checkModifier","indexOf","parseParamType","param","allowIndexed","originalParam","newNode","parent","node","state","allowType","indexed","replace","c","allowParams","verifyType","child","allowName","allowArray","sibling","readArray","populate","params","FormatTypes","sighash","minimal","full","json","paramTypeArray","RegExp","ParamType","constructorGuard","operation","arrayLength","arrayChildren","fromObject","_isParamType","comp","JSON","parse","stringify","fromString","isParamType","ParamTypify","parseParams","allowIndex","splitNesting","Fragment","_isFragment","isFragment","FunctionFragment","EventFragment","ConstructorFragment","ErrorFragment","trim","split","anonymous","inputs","input","isEventFragment","verifyIdentifier","regexParen","modifier","warn","parseGas","gas","comps","parseModifiers","constant","payable","stateMutability","console","log","verifyState","isConstructorFragment","parens","outputs","output","toString","isFunctionFragment","returns","checkForbidden","fragment","sig","isErrorFragment","regexIdentifier","depth","paramTypeBytes","paramTypeNumber","AbiCoder","_getCoder","component","_getWordSize","_getReader","_getWriter","getDefaultValue","from","defaultAbiCoder","LogDescription","TransactionDescription","ErrorDescription","Indexed","_isIndexed","BuiltinErrors","signature","reason","wrapAccessError","property","wrap","Interface","fragments","abi","filter","bucket","deploy","functions","events","j","address","id","eventFragment","getFunction","nameOrSignatureOrSighash","getSighash","matching","keys","f","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","getEventTopic","getError","_","_decodeParams","_abiCoder","_encodeParams","encodeDeploy","decodeErrorResult","encodeErrorResult","decodeFunctionData","functionFragment","encodeFunctionData","decodeFunctionResult","errorArgs","errorName","errorSignature","selector","builtin","method","encodeFunctionResult","encodeFilterTopics","topics","encodeTopic","pop","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","expected","nonIndexed","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","parseTransaction","tx","args","parseLog","topic","parseError","hexData","errorFragment","_isInterface","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","done","then","apply","resolveName","resolver","nameOrPromise","resolveAddresses","paramType","all","makeError","populateTransaction","contract","overrides","signer","override","getAddress","check","provider","resolved","resolvedAddress","interface","to","ro","nonce","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","accessList","intrinsic","roValue","customData","ccipReadEnabled","leftovers","l","buildPopulate","buildEstimate","signerOrProvider","estimateGas","addContractWait","wait","bind","confirmations","receipt","logs","event","parsed","eventSignature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","buildCall","collapseSimple","blockTag","deployTransaction","_deployed","call","transaction","buildSend","txRequest","sendTransaction","buildDefault","getEventTag","RunningEvent","tag","_listeners","addListener","listener","once","item","removeAllListeners","listeners","listenerCount","run","argsCopy","setTimeout","prepareEvent","getEmit","ErrorRunningEvent","FragmentRunningEvent","contractInterface","decodeError","WildcardRunningEvent","BaseContract","addressOrName","uniqueFilters","filters","catch","uniqueSignatures","callStatic","signatures","isInterface","deployed","_deployedPromise","getCode","contractAddress","fallback","connect","attach","isIndexed","_normalizeRunningEvent","runningEvent","_runningEvents","_getRunningEvent","eventName","_checkRunningEvents","emit","_wrappedEmits","off","_wrapEvent","_addEventListener","wrappedEmit","on","queryFilter","fromBlockOrBlockhash","toBlock","fromBlock","getLogs","Contract","Zero","NegativeOne","throwFault","fault","zeros","getMultiplier","decimals","formatFixed","multiplier","negative","fraction","mod","whole","div","wholeValue","fractionValue","wei","FixedFormat","width","_multiplier","FixedNumber","hex","_hex","_value","_isFixedNumber","_checkFormat","other","addUnsafe","a","b","fromValue","subUnsafe","sub","mulUnsafe","divUnsafe","floor","hasFraction","isNegative","ONE","toFormat","ceiling","round","factor","bump","BUMP","toUnsafeFloat","parseFloat","fixedFormat","numeric","decimal","fromBytes","names","formatUnits","unitName","formatEther","internalType","AppContent","balanceInEth","Intl","NumberFormat","style","currency","async","res","ethereum","window","getSigner","send","eth","getBalance","usdc","usdcContract","usdcBalance","balanceOf"],"sourceRoot":""}